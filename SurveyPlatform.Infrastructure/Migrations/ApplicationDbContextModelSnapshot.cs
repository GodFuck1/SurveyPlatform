// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveyPlatform.Infrastructure.Data;

#nullable disable

namespace SurveyPlatform.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SurveyPlatform.Core.Entities.Poll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.ToTable("Polls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorID = 1,
                            CreatedAt = new DateTime(2024, 11, 15, 16, 38, 19, 802, DateTimeKind.Utc).AddTicks(9720),
                            Description = "Проголосуй за лучший язык программирования.",
                            Title = "Любимый язык программирования",
                            UpdatedAt = new DateTime(2024, 11, 15, 16, 38, 19, 802, DateTimeKind.Utc).AddTicks(9721)
                        },
                        new
                        {
                            Id = 2,
                            AuthorID = 2,
                            CreatedAt = new DateTime(2024, 11, 15, 16, 38, 19, 802, DateTimeKind.Utc).AddTicks(9722),
                            Description = "Кто станет президентом США в 2028.",
                            Title = "Президент США",
                            UpdatedAt = new DateTime(2024, 11, 15, 16, 38, 19, 802, DateTimeKind.Utc).AddTicks(9723)
                        });
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.PollOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PollId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("PollOptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "C#",
                            PollId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Java",
                            PollId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Python",
                            PollId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Трамп(наш слон)",
                            PollId = 2
                        },
                        new
                        {
                            Id = 5,
                            Content = "Харрис(не наш слон)",
                            PollId = 2
                        });
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.PollResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OptionId")
                        .HasColumnType("integer");

                    b.Property<int>("PollId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.ToTable("PollResponses");
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            Name = "Admin",
                            Password = "admin123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ne_admin@example.com",
                            Name = "NeAdmin",
                            Password = "tochno_ne_admin123"
                        });
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.Poll", b =>
                {
                    b.HasOne("SurveyPlatform.Core.Entities.User", "Author")
                        .WithMany("Polls")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.PollOption", b =>
                {
                    b.HasOne("SurveyPlatform.Core.Entities.Poll", "Poll")
                        .WithMany("Options")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.PollResponse", b =>
                {
                    b.HasOne("SurveyPlatform.Core.Entities.PollOption", "Option")
                        .WithMany("Responses")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyPlatform.Core.Entities.Poll", "Poll")
                        .WithMany("Responses")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyPlatform.Core.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Poll");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.Poll", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.PollOption", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SurveyPlatform.Core.Entities.User", b =>
                {
                    b.Navigation("Polls");

                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
